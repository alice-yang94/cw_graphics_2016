/************************************************************************/
/*    Graphics 317 coursework exercise 02                               */
/*    Author: Bernhard Kainz                                            */
/*    This file has to be altered for this exercise                     */
/************************************************************************/

#version 150 compatibility

uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;
uniform float specularExponent;
uniform int shader;

in elemData
{
  vec3 pos;
  vec3 normal;
  vec4 color;
}frag;

///////////////

void main()
{
  vec4 outcol = frag.color;

  if(shader == 2)
  {
    vec3 lightSource = gl_LightSource[0].position.xyz;
    // d is distance from light source to frag
    float d = distance(lightSource, frag.pos);
    float attenuation = 1.0 / (gl_LightSource[0].constantAttenuation
      + gl_LightSource[0].linearAttenuation * d
      + gl_LightSource[0].quadraticAttenuation * d * d);
    
    // l is direction to light source from frag 
    vec3 l = normalize(vec3(lightSource - frag.pos));

    // e is direction from camera to frag
    vec3 e = normalize(frag.pos);
    vec3 r = reflect(l, frag.normal);
    vec4 id = attenuation * diffuseColor * max(dot(frag.normal,l),0);
    vec4 is = attenuation * specularColor * pow(max(dot(r,e),0), 0.3*specularExponent);
    outcol = ambientColor + id + is;
  }

  if(shader == 3)
  {
    vec3 lightSource = gl_LightSource[0].position.xyz;
    // l is direction to light source from frag 
    vec3 l = normalize(vec3(lightSource - frag.pos));
    vec3 n = normalize(frag.normal);
    float i_f = dot(l,n);
    if (i_f > 0.98) {
      outcol = vec4(0.8, 0.8, 0.8, 1.0);
    } else if (i_f > 0.5 && i_f <= 0.98) {
      outcol = vec4(0.8, 0.4, 0.4, 1.0);
    } else if (i_f > 0.25 && i_f <= 0.5) {
      outcol = vec4(0.6, 0.2, 0.2, 1.0);
    } else {
      outcol = vec4(0.1, 0.1, 0.1, 1.0);
    }
  }

  gl_FragColor = outcol;
}
